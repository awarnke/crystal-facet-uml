Measures for Reliability    [0008D]


Mature Platform    [0109C]
  OS provides resource limits    [0061F]
  OS does not swap, does not overcommit    [0062F]
  OS has mature peripheral-drivers    [0063F]
   --> Maturity    [0124R]


Layered Architecture    [0061C]
  improves --> Maturity    [0039R]


Example Guidelines    [0073C]
  Spark/ADA: Avionics    [0022F]
  Power of Ten: NASA    [0019F]
  SecureC    [0021F]
  MISRA-C/C++: automotive    [0020F]
  implements --> Coding Guidelines    [0054R]


Static Code Analysis    [0086C]
  enhances --> Maturity    [0099R]


Maturity    [0035C]


Code Generation    [0087C]
| An understandable model and a small code generator
| allow to generate mature software.
  supports --> Maturity    [0100R]


Coding Guidelines    [0062C]
  static thread model    [0010F]
  | Execution threads shall not be started/stopped dynamically
  no endless loops    [0008F]
  | Every loop shall have a counter to ensures that 
  | after a predefined maximum value the loop is definitely quit
  consistent error handling    [0009F]
  | Inconsistencies in error handling make 
  | bugs in error handling more likely
  valid Memory Addresses    [0007F]
  | Only valid memory addresses may be read/written.
  | E.g. Java solves this by prohibiting pointers,
  | In C/C++, check pointers and array indices before usage
  no dynamic Memory    [0006F]
  | When the program is running, 
  | - it must not fail due to 
  |   - memory fragmentation (virtual addresses/physical pages)
  |   - out of memory situations
  | - it shall have a defined timing (which new/malloc cannot provide)
  no recursion: avoid Stack overflow    [0005F]
  lock critical sections    [0024F]
  | Always lock critical sections.
  | Exceptions to locking are a nightmare.
  single point of return: simple control flow    [0023F]
  | Simple control flow is key to understandable code
  improves --> Maturity    [0040R]


Availability    [0034C]


Redundancy    [0074C]
  2 of 3 voter    [0025F]
  duo-duplex    [0026F]
  limp home    [0027F]
  function migration    [0028F]
  enhances --> Availability    [0055R]


Fault injection Tests    [0063C]
  improves --> Fault Tolerance    [0041R]


Fault Tolerance    [0036C]


Input Signal Validation    [0083C]
   --> Fault Tolerance    [0128R]


Recoverability    [0037C]


Partitioning    [0075C]
   --> Fault Tolerance    [0129R]
   --> Recoverability    [0130R]
