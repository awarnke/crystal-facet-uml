Measures for Reliability


Layered Architecture
  improves --> Maturity


Example Guidelines
  Spark/ADA: Avionics
  Power of Ten: NASA
  SecureC
  MISRA-C/C++: automotive
  implements --> Coding Guidelines


Coding Guidelines
  static thread model
  | Execution threads shall not be started/stopped dynamically
  no endless loops
  | Every loop shall have a counter to ensures that 
  | after a predefined maximum value the loop is definitely quit
  consistent error handling
  | Inconsistencies in error handling make 
  | bugs in error handling more likely
  valid Memory Addresses
  | Only valid memory addresses may be read/written.
  | E.g. Java solves this by prohibiting pointers,
  | In C/C++, check pointers and array indices before usage
  no dynamic Memory
  | When the program is running, 
  | - it must not fail due to 
  |   - memory fragmentation (virtual addresses/physical pages)
  |   - out of memory situations
  | - it shall have a defined timing (which new/malloc cannot provide)
  no recursion: avoid Stack overflow
  lock critical sections
  | Always lock critical sections.
  | Exceptions to locking are a nightmare.
  single point of return: simple control flow
  | Simple control flow is key to understandable code
  improves --> Maturity


Maturity


Availability


Fault Tolerance


Fault injection Tests
  improves --> Fault Tolerance


Recoverability
