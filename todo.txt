ideas for future versions:
  @gui
  [ ] performance optimization: redraw only when shown(=visible) items have changed;
      do not redraw 3 times when changing 3 attributes simultaneously. (especially at undo/redo)
  [ ] a "saveAs" or export-as-cfu1 command should allow to copy the current db
  [ ] next to the about button, a help button is needed that can provide context-sensitive information.
  [ ] rename relationship types so that "source"-"rel-type-name"-"destination" is a correct sentence, see e.g. Realization/Generalization
  [ ] when opening the second database, the root diagram cannot be focused immediately
  [ ] show a progress bar while exporting diagrams
  [ ] update seach result view when changing the database (e.g. by undo)
  @gui+ctrl
  [ ] When undoing/redoing things, switch to a diagram where you see the changes
  [ ] when changing sets of objects (cut/copy/paste/delete/redo/undo...) print understandable statistics
  @pencil
  [ ] Support Diagram-Types: Profile
  [ ] exception+error flows to leave an interruptable area (activity diagrams)
  [ ] activity bars on lifelines missing
  [ ] feature compartments in use-cases look ugly
  [ ] more relationship types needed: undirected ---- and one-way x--> and no x--x dependency (non-navigateable ends)
  [ ] more relationship types needed: undirected ---- and one-way x--> and no x--x association
  [ ] more relationship types needed: undirected ---- communication-path
  [ ] sequence diagrams need if/loop-boxes
  [ ] activity diagrams need swimlanes/partitions
  [ ] improve layouting of containments, e.g. consider arrows and more gap-space
  @io
  [ ] export formats: extend export formats by latex, doxygen, asciidoc, rtf(?), pdf
  [ ] how to exclude diagrams from export? some are unimportant and exist just for completeness
  @data
  [ ] some diagrams exist for completeness only - but do not contain important information. These shall be greyed out.
  [ ] performance optimization: possibly the feature and relationship filter on a visible_set is slow?
  [ ] diagrams need some kind of classification/stereotype like idea-for-future, rejected-alternative, ...
  @ctrl
  [ ] export XMI format
  [ ] import XMI format
  @universal+utf8stringbuf
  [ ] combine the static string allocation with dynamic additional buffers for unexpectedly-long strings
  [ ] combine the static array allocation with dynamic additional buffers for arrays of unpredictable lengths
  [ ] add streaming support, e.g. to escape characters while writing to a file or to parse json before having received all data
  @main
  @ts_log/trace/test_fw


