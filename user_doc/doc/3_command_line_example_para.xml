<!DOCTYPE para>
<para>

To store a database in a version control system (vcs) like svn or git,
you have several options:
<itemizedlist>
  <listitem>
    <para>
        Store the binary database format to your vcs,
        lock the file while modifying it.
    </para>
    <para>
        Advantage is the simple usage.
        Disadvantage is the lack of
        a) diff and merge of files,
        b) identify who changed which line when and with which commit message,
        c) concurrent modifications.
    </para>
  </listitem>
  <listitem>
    <para>
        Store the json export to your vcs.
        To modify it, import it to an empty crystal-facet-uml database.
        When finished, export it back to json.
    </para>
    <para>
        Afterwards, one can
        a) merge and diff files,
        b) find out who to ask on which change.
        Disadvantage is that this feature requires the new version 1.35.0 or later and
        possibly some additional scripts to simplify the import and export operations.
    </para>
    <para>
        Step 1: Export and sync
    </para>
    <para>
        <command>crystal-facet-uml -e my_database_file.cfu1 json .</command>
    </para>
    <para>
        When all your changes are stored in json format (and only then), sync with your version control system.
    </para>
    <para>
        Step 2: Import and edit
    </para>
    <para>
        <command>crystal-facet-uml -i my_database_file.cfu1 add my_database_file.json</command>
    </para>
    <para>
         After import, run the consistency checks on the database (recommended).
    </para>
    <para>
        <command>crystal-facet-uml -t my_database_file.cfu1 || echo "ERROR $?"</command>
    </para>
    <para>
        When the json format has been imported successfully,
        continue working on the file my_database_file.cfu1
        (which is a binary sqlite database format).
    </para>
    <para>
        <command>crystal-facet-uml -u my_database_file.cfu1</command>
    </para>
  </listitem>
</itemizedlist>

</para>
