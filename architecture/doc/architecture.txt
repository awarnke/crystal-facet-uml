/*!
 *  \page cfu-architecture-page crystal facet uml architecture
 *  
 *  \image html crystal_facet_uml.png
 *  \image latex crystal_facet_uml.png "" width=5cm
 * 
 *  \section cfu-ifactors Influence Factors
 *
 *  This section describes the problem space: requirements and expected environment.
 *
 *  \subsection cfu-if-gen Generator
 * 
 *  This subsection lists factors that influence the idl to target code generator.
 * 
 *  \section cfu-ddec Design Decisions
 *
 *  This section describes the taken design decisions: alternatives and rationales for decisions.
 * 
 *  \subsection cfu-cli Design decisions on interfaces
 *
 *  - __data storage__
 *    \n Q: Which technique is used to store data persistently?
 *      - __XML__ (A1)
 *        \n The database is stored in XML format.
 *          - pro: text based, fits to svn and git repositories
 *          - con: all data needs to fit to RAM (or complex data handling)
 *      - __Json__ (A2)
 *        \n The database is stored in Json format.
 *          - pro: text based, fits to svn and git repositories
 *          - con: all data needs to fit to RAM (or complex data handling)
 *      - __SQLite DB__ (A3)
 *        \n The database is stored in sqlite3 format.
 *          - pro: the database cares on handling big amounts of data
 *          - con: binary files are not suitable for git repositories
 *      - __Key-Value-Pairs__ (A4)
 *        \n The database is stored as key-value pairs.
 *          - pro: allows automatic merges by git and svn
 *          - con: all data needs to fit to RAM (or complex data handling)
 *      .
 *      Decision: (A3) is taken, most future-proof in case the database becomes large
 *      \n DEC-101
 * 
 *  \section cfu-solution Solution
 *
 *  This section describes the selected solution: deployment, static and dynamic behaviour.
 * 
 *
 *  \subsection cfu-static-views Static Views
 *
 *  - __Layers and Components__
 *      - __View-Layer__
 *          - __gui__
 *            \n presents diagrams and data-objects, handles graphical user interaction
 *          - __main__
 *            \n starts the program and handles command line interaction
 *      .
 *      - __Model and Control Layer__
 *          - __data__
 *            \n loads and stores data, notifies listeners on changes
 *          - __ctrl__
 *            \n t.b.d. (Note: in the MVC pattern, the controller knows view and model, not the view the controller)
 *      .
 *      - __Utilities and Libraries Layer__
 *          - __trace, log__
 *          - __sqlite3__
 *          - __glib, gdk, gtk, cairo__
 *      .
 *  .
 *  \section cfu-arc-apx Appendix 
 *  \author (c) 2016-2016 A.Warnke; Email-contact: ipc-quartztime-at-andreaswarnke-dot-de
 */

