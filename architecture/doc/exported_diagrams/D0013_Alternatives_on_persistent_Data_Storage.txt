Alternatives on persistent Data Storage          [D0013]
| This diagram shows fundamental design decisions of the crystal_facet_uml architecture.


XML                                              [C0074]
| The database is stored in XML format.
|     pro: text based, fits to svn and git repositories
|     con: all data needs to fit to RAM
|             (or complex data handling)
  solves --> Persistent Data Storage             [R0094]


Persistent Data Storage                          [C0075]
| The UML Model shall be stored persistently.


Json                                             [C0076]
| The database is stored in Json format.
|     pro: text based, fits to svn and git repositories
|     con: all data needs to fit to RAM
|             (or complex data handling)
  solves --> Persistent Data Storage             [R0093]


SQLite DB                                        [C0077]
| The database is stored in sqlite3 format.
|     pro: the database cares on handling big amounts of data
|     con: binary files are not suitable for git repositories
  solves --> Persistent Data Storage             [R0091]


Key-Value Pairs                                  [C0078]
| The database is stored as key-value pairs.
|     pro: allows automatic merges by git and svn
|     con: all data needs to fit to RAM (or complex data handling)
  solves --> Persistent Data Storage             [R0092]


SQLite is chosen                                 [C0079]
| Rationale:
| This alternative is most future-proof 
| in case the database becomes large.
  --> SQLite DB                                  [R0095]
